FUNCTION y_bwst_ps_projitm.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(I_ISOURCE) TYPE  SBIWA_S_INTERFACE-ISOURCE OPTIONAL
*"     VALUE(I_REQUNR) TYPE  SBIWA_S_INTERFACE-REQUNR OPTIONAL
*"     VALUE(I_MAXSIZE) TYPE  SBIWA_S_INTERFACE-MAXSIZE DEFAULT 1000
*"     VALUE(I_INITFLAG) TYPE  SBIWA_S_INTERFACE-INITFLAG OPTIONAL
*"     VALUE(I_UPDMODE) TYPE  SBIWA_S_INTERFACE-UPDMODE OPTIONAL
*"     VALUE(I_DATAPAKID) TYPE  SBIWA_S_INTERFACE-DATAPAKID DEFAULT
*"       50000
*"     VALUE(I_READ_ONLY) TYPE  SBIW_BOOL DEFAULT SBIW_C_FALSE
*"  TABLES
*"      I_T_SELECT TYPE  SBIWA_T_SELECT OPTIONAL
*"      I_T_FIELDS TYPE  SBIWA_T_FIELDS OPTIONAL
*"      E_T_DATA STRUCTURE  YBWST_STR_PROJITM OPTIONAL
*"  EXCEPTIONS
*"      NO_MORE_DATA
*"      ERROR_PASSED_TO_MESS_HANDLER
*"----------------------------------------------------------------------




******************************************************************************************************************************************************************************************************

  DATA: itab_list  TYPE TABLE OF abaplist,
        g_t_status LIKE syst,
        
        lr_pspid   TYPE RANGE OF ps_pspid,
        lr_posid   TYPE RANGE OF ps_posid,
        lr_aufnr   TYPE RANGE OF aufnr,
        ls_final   TYPE ybwst_str_projitm,
        lv_message TYPE string.


  STATICS: lt_final_data TYPE TABLE OF ybwst_str_projitm.

"----------------------------------------12.05.2025
*Create a temporary CHAR-based structure to split ASCII lines
TYPES: BEGIN OF ty_split_raw,
PSPID_4 TYPE c LENGTH 24,
POST1_5 TYPE c LENGTH 40,
POSID_6 TYPE c LENGTH 24,
POST1_7 TYPE c LENGTH 40,
AUFNR_1_8 TYPE c LENGTH 12,
AUFNR_2_9 TYPE c LENGTH 12,
BANFN_10 TYPE c LENGTH 10,
BNFPO_11 TYPE c LENGTH 5,
EBELN_13 TYPE c LENGTH 10,
EBELP_14 TYPE c LENGTH 5,
AFNAM_17 TYPE c LENGTH 12,
BADAT_18 TYPE c LENGTH 8,
BEDAT_19 TYPE c LENGTH 8,
TEXT_20 TYPE c LENGTH 40,
NAME1_21 TYPE c LENGTH 35,
VPROZ_22 TYPE c LENGTH 3,
USER4_23 TYPE c LENGTH 11,
PR_WERTV8_25 TYPE c LENGTH 15,
PO_WERTV8_24 TYPE c LENGTH 15,
PR_WHGBTR_26 TYPE c LENGTH 15,
PO_WHGBTR_27 TYPE c LENGTH 15,
ACT_WKGBTR_28 TYPE c LENGTH 15,
EXE_WERTV8_29 TYPE c LENGTH 15,
DP_WKGBTR_30 TYPE c LENGTH 15,
YST_INFO1 TYPE c LENGTH 25,
YST_KENNZ_ORD TYPE c LENGTH 30,
YST_ORDBUD TYPE c LENGTH 11,
WAERS TYPE c LENGTH 5,
PBUKR_2 TYPE c LENGTH 4,
DATETIMESTAMP TYPE c LENGTH 15,
       END OF ty_split_raw.



DATA: lt_ascii_lines  TYPE STANDARD TABLE OF string, "12.05.2025
      ls_raw          TYPE ty_split_raw. "12.05.2025
"------------------------------------------end

  "Datenaufbereitung und Datenformatierung, Ausführung des Extraktors
  IF i_initflag = abap_true.

    "Parametern für die Auswahl, zum Selektionsbild des Programms übergehen
    LOOP AT i_t_select[] INTO DATA(ls_selection).

      CASE ls_selection-fieldnm.
*        WHEN 'PBUKR_2'.
*          APPEND VALUE #( sign = ls_selection-sign
*                          option = ls_selection-option
*                          low = ls_selection-low
*                          high = ls_selection-high ) TO lr_bukrs.
        WHEN 'POSID_6'.
          APPEND VALUE #( sign = ls_selection-sign
                          option = ls_selection-option
                          low = ls_selection-low
                          high = ls_selection-high ) TO lr_posid.
        WHEN 'PSPID_4'.
          APPEND VALUE #( sign = ls_selection-sign
                          option = ls_selection-option
                          low = ls_selection-low
                          high = ls_selection-high ) TO lr_pspid.

        WHEN 'AUFNR_1_8'.
          APPEND VALUE #( sign = ls_selection-sign
                          option = ls_selection-option
                          low = ls_selection-low
                          high = ls_selection-high ) TO lr_aufnr.

      ENDCASE.

    ENDLOOP.


**************************************************************************************************************************************************************************************
    SUBMIT ypsst_projectitems  WITH s_pbukr EQ '2333' 
                               WITH s_pspid IN lr_pspid 
                               WITH s_posid IN lr_posid 
                               WITH s_aufnr IN lr_aufnr
                               WITH p_layout = '/BWEXTRACTOR'  
                               EXPORTING LIST TO MEMORY
                               AND RETURN.



    "Extraktion der Daten des aufgerufenen Programms
    CALL FUNCTION 'LIST_FROM_MEMORY'
      TABLES
        listobject = itab_list
      EXCEPTIONS
        not_found  = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
      CONCATENATE sy-msgid sy-msgno sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      INTO lv_message SEPARATED BY space.
    ENDIF.

    DATA: lt_ascii TYPE list_string_table.

    "Konvertiert die gelieferte Liste nach ASCI. Dabei wird der reine Textteil der Liste ohne Attribute Zeile für Zeile in die vorbereitete interne Tabelle (LISTASCI) kopiert
    CALL FUNCTION 'LIST_TO_ASCI'
      EXPORTING
        list_index        = -1
      IMPORTING
        list_string_ascii = lt_ascii
      TABLES
        listobject        = itab_list.


    DELETE lt_ascii INDEX lines( lt_ascii ).



  "-----------------------------------12.05.2025
    "FIELD-SYMBOL zeigt auf eine Tabellenzeile
*    LOOP AT lt_ascii ASSIGNING FIELD-SYMBOL(<lfs_ascii>) FROM 4. "ab Zeile 4 starten, um die Listenüberschrift wegzulassen
*      SPLIT <<lfs_ascii>>+1 AT '|' INTO TABLE DATA(lt_splitted_data). "teilen die Zeile nach dem '|'-Zeichen in Spalten auf, dann schreiben die einzelnen SPALTEN in die WÄHLER der Tabelle


*    " Skip short or non-data lines (adjust logic if needed)
*  IF strlen( <lfs_ascii> ) < 460.
*    CONTINUE.
*  ENDIF.

LOOP AT lt_ascii into data(ls_ascii) FROM 4.

  " Split based on fixed offsets
ls_raw-PSPID_4 = ls_ascii+1(24).
ls_raw-POST1_5 = ls_ascii+25(40).
ls_raw-POSID_6 = ls_ascii+66(24).
ls_raw-POST1_7 = ls_ascii+91(40).
ls_raw-AUFNR_1_8 = ls_ascii+132(12).
ls_raw-AUFNR_2_9 = ls_ascii+145(12).
ls_raw-BANFN_10 = ls_ascii+158(10).
ls_raw-BNFPO_11 = ls_ascii+169(5).
ls_raw-EBELN_13 = ls_ascii+175(10).
ls_raw-EBELP_14 = ls_ascii+186(5).
ls_raw-AFNAM_17 = ls_ascii+192(12).
ls_raw-BADAT_18 = ls_ascii+205(8).
ls_raw-BEDAT_19 = ls_ascii+214(8).
ls_raw-TEXT_20 = ls_ascii+223(40).
ls_raw-NAME1_21 = ls_ascii+264(35).
ls_raw-VPROZ_22 = ls_ascii+300(3).
ls_raw-USER4_23 = ls_ascii+304(11).
ls_raw-PR_WERTV8_25 = ls_ascii+316(15).
ls_raw-PO_WERTV8_24 = ls_ascii+332(15).
ls_raw-PR_WHGBTR_26 = ls_ascii+348(15).
ls_raw-PO_WHGBTR_27 = ls_ascii+364(15).
ls_raw-ACT_WKGBTR_28 = ls_ascii+380(15).
ls_raw-EXE_WERTV8_29 = ls_ascii+396(15).
ls_raw-DP_WKGBTR_30 = ls_ascii+412(15).
ls_raw-YST_INFO1 = ls_ascii+428(25).
ls_raw-YST_KENNZ_ORD = ls_ascii+454(30).
ls_raw-YST_ORDBUD = ls_ascii+485(11).


   " Convert CHAR to real types (your_final_structure fields must match)
ls_final-PSPID_4 = ls_raw-PSPID_4.
ls_final-POST1_5 = ls_raw-POST1_5.
ls_final-POSID_6 = ls_raw-POSID_6.
ls_final-POST1_7 = ls_raw-POST1_7.
ls_final-AUFNR_1_8 = ls_raw-AUFNR_1_8.
ls_final-AUFNR_2_9 = ls_raw-AUFNR_2_9.
ls_final-BANFN_10 = ls_raw-BANFN_10.
ls_final-BNFPO_11 = ls_raw-BNFPO_11.
ls_final-EBELN_13 = ls_raw-EBELN_13.
ls_final-EBELP_14 = ls_raw-EBELP_14.
ls_final-AFNAM_17 = ls_raw-AFNAM_17.
ls_final-BADAT_18 = ls_raw-BADAT_18.
ls_final-BEDAT_19 = ls_raw-BEDAT_19.
ls_final-TEXT_20 = ls_raw-TEXT_20.
ls_final-NAME1_21 = ls_raw-NAME1_21.
ls_final-VPROZ_22 = ls_raw-VPROZ_22.
ls_final-USER4_23 = ls_raw-USER4_23.
ls_final-PR_WERTV8_25 = ls_raw-PR_WERTV8_25.
ls_final-PO_WERTV8_24 = ls_raw-PO_WERTV8_24.
ls_final-PR_WHGBTR_26 = ls_raw-PR_WHGBTR_26.
ls_final-PO_WHGBTR_27 = ls_raw-PO_WHGBTR_27.
ls_final-ACT_WKGBTR_28 = ls_raw-ACT_WKGBTR_28.
ls_final-EXE_WERTV8_29 = ls_raw-EXE_WERTV8_29.
ls_final-DP_WKGBTR_30 = ls_raw-DP_WKGBTR_30.
ls_final-YST_INFO1 = ls_raw-YST_INFO1.
ls_final-YST_KENNZ_ORD = ls_raw-YST_KENNZ_ORD.
ls_final-YST_ORDBUD = ls_raw-YST_ORDBUD.








*      " Feste Offsets verwenden, um die Feldinhalte voneinander zu trennen:
*      LOOP AT lt_splitted_data ASSIGNING FIELD-SYMBOL(<lfs_value>).
*
*        ASSIGN COMPONENT sy-tabix OF STRUCTURE ls_final TO FIELD-SYMBOL(<lfs_structure_field>). "Mapping mit Struktur
*
*
*        "Schreiben eines Wertes in ein Feld aus einer Struktur.
*        "CONDENSE <lfs_value>. "NO-GAPS?
*        SHIFT <lfs_value> LEFT DELETING LEADING space.
*        TRY.
*            "MODIFIKATIONSBEREICH: Datumskonvertierung
*            DATA lv_type(1).
*            DESCRIBE FIELD <lfs_structure_field> TYPE lv_type.
*            CASE lv_type.
*              WHEN 'D'.
*                CALL FUNCTION 'CONVERSION_EXIT_SDATE_INPUT'
*                  EXPORTING
*                    input  = <lfs_value>
*                  IMPORTING
*                    output = <lfs_structure_field>.
*              "MODIFIKATIONSBEREICH: Zahlen
*              WHEN 'P'.
*                REPLACE ALL OCCURRENCES OF '.' IN <lfs_value> WITH ''.
*                REPLACE ALL OCCURRENCES OF ',' IN <lfs_value> WITH '.'.
*                <lfs_structure_field> = CONV #( <lfs_value> ).
*              WHEN OTHERS.
*                <lfs_structure_field> = CONV #( <lfs_value> ).
*            ENDCASE.


*            "Behebung von Fehlern, die durch Zahlen verursacht werden (Punkt, Komma)
*          CATCH cx_sy_conversion_no_number.
*            REPLACE ALL OCCURRENCES OF '.' IN <lfs_value> WITH ''.
*            REPLACE ALL OCCURRENCES OF ',' IN <lfs_value> WITH '.'.
*            <lfs_structure_field> = CONV #( <lfs_value> ).
*
*        ENDTRY.
*
*      ENDLOOP.

"-----------------------end

      "MODIFIKATIONSBEREICH: Projekt
      CALL FUNCTION 'CONVERSION_EXIT_ABPSN_INPUT'
        EXPORTING
          input  = ls_final-pspid_4
        IMPORTING
          output = ls_final-pspid_4.

*      " * Datum
*      DATA lv_type(1).
*      DESCRIBE FIELD <lfs_structure_field> TYPE lv_type.
*      CASE lv_type.
*        WHEN 'D'.
*          CALL FUNCTION 'CONVERSION_EXIT_SDATE_INPUT'
*            EXPORTING
*              input  = <lfs_value>
*            IMPORTING
*              output = <lfs_structure_field>.
*      ENDCASE.

*      CALL FUNCTION 'CONVERSION_EXIT_SDATE_INPUT'
*        EXPORTING
*          input  = ls_final-badat_18
*        IMPORTING
*          output = ls_final-badat_18.
*
*      CALL FUNCTION 'CONVERSION_EXIT_SDATE_INPUT'
*        EXPORTING
*          input  = ls_final-bedat_19
*        IMPORTING
*          output = ls_final-bedat_19.

      
      ls_final-waers = 'EUR'.
      ls_final-pbukr_2 = '2333'.
      ls_final-datetimestamp = sy-datum && sy-uzeit.

      APPEND ls_final TO lt_final_data.

    ENDLOOP.


  ELSE.

    IF lt_final_data IS INITIAL.

      RAISE no_more_data.
    ENDIF.



    DATA(lv_records_amount) = 0.
    LOOP AT lt_final_data ASSIGNING FIELD-SYMBOL(<lfs_final>).
      lv_records_amount = lv_records_amount + 1.
      IF lv_records_amount <= i_maxsize.
        APPEND <lfs_final> TO e_t_data.
        DELETE lt_final_data INDEX 1.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.


  ENDIF.

ENDFUNCTION. 







---------------------------------------------------------------------------------------- program na dynamiczne wyłuskiwanie pól z nagłówka ---------------------------------------------------------------------------------------


*&---------------------------------------------------------------------*
*& Report YPSST_10200044_1
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ypsst_10200044_1.

DATA lv_header(255) VALUE '|Projekt    |Projektbezeichnung   |PSP-Element       |PSP Bezeichnung                         |Hauptauftrag|Auftrag     |BANF   |'.
DATA lv_data(255) VALUE '|J8II-110099|Test Invest fuer AnBu|J8II-110099-I-S001|Selbst erstellte Software Hochofen 3    |400000197152|400000197152|xyz'.

DATA lv_offset TYPE i.
DATA lv_last_offset TYPE i.
DATA lv_length TYPE i.

DATA: lt_length TYPE STANDARD TABLE OF i.

START-OF-SELECTION.

  " Determin offset of all separation character in header line.
  FIND ALL OCCURRENCES OF '|' IN lv_header RESULTS DATA(lt_results).

  " We don't need the first entry.
  DELETE lt_results INDEX 1.

  lv_offset = 1. "First character is |, so we start at offset 1.

  LOOP AT lt_results ASSIGNING FIELD-SYMBOL(<ls_result>).
    " calculate the length of the data cell without the separator character:
    "   Offset last data cell - offset actual data cell - 1.
    lv_length = <ls_result>-offset - lv_last_offset - 1.

    " make something with the content.
    WRITE:
      lv_data+lv_offset(lv_length)
         , ','.

    " calculate the starting point of the next data cell.
    lv_offset = <ls_result>-offset + 1.
    " remember the
    lv_last_offset = <ls_result>-offset.

  ENDLOOP.




